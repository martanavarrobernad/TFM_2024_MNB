#tarea final con triggers  
import random
import time
import datetime
import psychopy
import pandas as pd
from psychopy import visual, core, event
import os
import pyxid2

# Directorio donde están los archivos Excel
ruta_carpeta_excel = r"C:\Users\navar\Desktop\tarea tfm\EXCELS"
# Obtener lista de archivos Excel en la carpeta
archivos_excel = [f for f in os.listdir(ruta_carpeta_excel) if f.endswith('.xlsx')]
# Elegir un archivo Excel aleatorio
archivo_seleccionado = random.choice(archivos_excel)
print(f"Archivo seleccionado: {archivo_seleccionado}")
# Leer el archivo Excel seleccionado
ruta_excel_seleccionado = os.path.join(ruta_carpeta_excel, archivo_seleccionado)
df_principal = pd.read_excel(ruta_excel_seleccionado)

# Configuración de la ventana
win = visual.Window(size=(800, 600), color=(1, 1, 1), units="pix", fullscr=False)

# Configuración del dispositivo para triggers
devices = pyxid2.get_xid_devices()
if len(devices) == 0:
    raise RuntimeError("No se encontró ningún dispositivo XID.")
dev = devices[0]  # Seleccionar el primer dispositivo
dev.set_pulse_duration(300)  # Configurar duración del pulso en milisegundos

# Lista para almacenar datos de la tarea
datos_ensayo = []
datos_principales = []

# Función para verificar si se ha presionado "escape" para salir y guardar los datos
def check_exit():
    if "escape" in event.getKeys():
        print("Cerrando la tarea...")
        guardar_datos()
        win.close()
        core.quit()

# Función para guardar datos en un archivo CSV
def guardar_datos():
    carpeta_resultados = r"C:\Users\navar\Desktop\tarea tfm\data"
    if not os.path.exists(carpeta_resultados):
        os.makedirs(carpeta_resultados)
    # Buscar el siguiente nombre de archivo disponible para ambos archivos
    i = 1
    while os.path.exists(os.path.join(carpeta_resultados, f"entrenamiento_sujeto{i:02d}.csv")) or os.path.exists(os.path.join(carpeta_resultados, f"tarea_sujeto{i:02d}.csv")):
        i += 1

    nombre_archivo_entrenamiento = os.path.join(carpeta_resultados, f"entrenamiento_sujeto{i:02d}.csv")
    nombre_archivo_tarea = os.path.join(carpeta_resultados, f"tarea_sujeto{i:02d}.csv")

    # Guardar el dataframe de entrenamiento en el archivo CSV
    if datos_ensayo:
        df_entrenamiento = pd.DataFrame(datos_ensayo, columns=["Fecha", "Expname", "Version PsychoPy", "Refresh Rate", "Frame Rate", "Exp Start",
                                                               "Participante", "Edad", "Imagen", "Inicio Fijación (ms)", "Fin Fijación (ms)",
                                                               "Inicio Imagen (ms)", "Fin Imagen (ms)", "Inicio Feedback (ms)", "Fin Feedback (ms)",
                                                               "Tecla pulsada", "Milisegundo de respuesta", "Tiempo de respuesta",
                                                               "correct", "Feedback", "Tipo de Asociación", "Go/No-Go", "Tecla Registrada", "Congruente", "Bloque", "GoTipoAsociacion"])
        df_entrenamiento.to_csv(nombre_archivo_entrenamiento, index=False)

    # Guardar el dataframe de tarea en el archivo CSV
    if datos_principales:
        df_tarea = pd.DataFrame(datos_principales, columns=["Fecha", "Expname", "Version PsychoPy", "Refresh Rate", "Frame Rate", "Exp Start",
                                                             "Participante", "Edad", "Imagen", "Inicio Fijación (ms)", "Fin Fijación (ms)",
                                                             "Inicio Imagen (ms)", "Fin Imagen (ms)", "Inicio Feedback (ms)", "Fin Feedback (ms)",
                                                             "Tecla pulsada", "Milisegundo de respuesta", "Tiempo de respuesta",
                                                             "correct", "Feedback", "Tipo de Asociación", "Go/No-Go", "Tecla Registrada", "Congruente", "Bloque", "GoTipoAsociacon"])
        df_tarea.to_csv(nombre_archivo_tarea, index=False)

imagenes_inhibicion = [
    r"C:\Users\navar\Desktop\tarea tfm\habitual_inhibition\INHIBICIÓN COGNITIVA\1.png",
    r"C:\Users\navar\Desktop\tarea tfm\habitual_inhibition\INHIBICIÓN COGNITIVA\2.png",
    r"C:\Users\navar\Desktop\tarea tfm\habitual_inhibition\INHIBICIÓN COGNITIVA\3.png",
    r"C:\Users\navar\Desktop\tarea tfm\habitual_inhibition\INHIBICIÓN COGNITIVA\4.png",
    r"C:\Users\navar\Desktop\tarea tfm\habitual_inhibition\INHIBICIÓN COGNITIVA\5.png",
    r"C:\Users\navar\Desktop\tarea tfm\habitual_inhibition\INHIBICIÓN COGNITIVA\6.png",
    r"C:\Users\navar\Desktop\tarea tfm\habitual_inhibition\INHIBICIÓN COGNITIVA\7.jpg"
]

for img_path in imagenes_inhibicion:
    imagen = visual.ImageStim(win, image=img_path)
    imagen.draw()
    win.flip()
    # Esperar a que el participante presione la barra espaciadora para avanzar
    while True:
        keys = event.waitKeys(keyList=["space", "escape"])
        if "space" in keys:
            break  # Avanzar a la siguiente imagen
        elif "escape" in keys:
            check_exit()  # Salir si se presiona Escape


# Función para pedir datos al usuario
def get_input(prompt_text):
    input_text = ""
    text_stim = visual.TextStim(win, text=prompt_text, color=(-1, -1, -1), height=30, pos=(0, 50))
    input_stim = visual.TextStim(win, text="_", color=(-1, -1, -1), height=30, pos=(0, -50))

    while True:
        text_stim.draw()
        input_stim.text = input_text + "_"
        input_stim.draw()
        win.flip()

        keys = event.waitKeys()
        for key in keys:
            if key == "space" and input_text:
                return input_text
            elif key == "backspace":
                input_text = input_text[:-1]
            elif key in "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 ":
                input_text += key
            elif key == "escape":
                print("Cerrando la tarea...")
                guardar_datos()
                win.close()
                core.quit()

# Preguntar por el nombre y la edad
nombre = get_input("Escribe tu nombre y presiona la barra espaciadora:")
edad = get_input("Escribe tu edad y presiona la barra espaciadora:")

# Confirmación antes de comenzar
confirm_text = visual.TextStim(win, text=f"¡Bienvenido {nombre}!\nEdad: {edad}\nPresiona Enter para comenzar.",
                               color=(-1, -1, -1), height=30)
confirm_text.draw()
win.flip()
if "escape" in event.waitKeys(keyList=["return", "escape"]):
    check_exit()

# Definir la cruz de fijación
fixation = visual.TextStim(win, text="+", color=(-1, -1, -1), height=40)
# Definir el estímulo de la imagen
imagen_stim = visual.ImageStim(win)
# Definir el estímulo de feedback
feedback_stim = visual.TextStim(win, text="", color=(-1, -1, -1), height=40)

# Lista de imágenes
imagenes = [
    r"C:\Users\navar\Desktop\tarea tfm\habitual_inhibition\E.jpg",
    r"C:\Users\navar\Desktop\tarea tfm\habitual_inhibition\F.jpg",
    r"C:\Users\navar\Desktop\tarea tfm\habitual_inhibition\fbE.jpg",
    r"C:\Users\navar\Desktop\tarea tfm\habitual_inhibition\A.jpg",
    r"C:\Users\navar\Desktop\tarea tfm\habitual_inhibition\B.jpg",
    r"C:\Users\navar\Desktop\tarea tfm\habitual_inhibition\C.jpg"
]

# Diccionario con la proporción de feedback congruente por imagen
proporciones_congruencia = {
    'B': 0.9,
    'E': 0.8,
    'A': 0.9,
    'F': 0.8,
    'fbE': 1.0,
    'C': 1.0
}

mapa_imagenes = {
    '1a': r"C:\Users\navar\Desktop\tarea tfm\habitual_inhibition\B.jpg",
    '2a': r"C:\Users\navar\Desktop\tarea tfm\habitual_inhibition\C.jpg",
    '3a': r"C:\Users\navar\Desktop\tarea tfm\habitual_inhibition\E.jpg",
    '4b': r"C:\Users\navar\Desktop\tarea tfm\habitual_inhibition\F.jpg",
    '5b': r"C:\Users\navar\Desktop\tarea tfm\habitual_inhibition\fbE.jpg",
    '6b': r"C:\Users\navar\Desktop\tarea tfm\habitual_inhibition\A.jpg"
}

# Definir los triggers únicos para cada imagen
trigger_map = {
    'C': 5,   # Go100
    'B': 6,   # Go90
    'E': 7,   # Go80
    'fbE': 8, # NoGo100
    'A': 9,   # NoGo90
    'F': 10   # NoGo80
}

def generar_congruencia(total_trials, congruencia_porcentaje):
    """
    Genera una lista determinista de congruencia/incongruencia basada en el porcentaje deseado.
    """
    congruentes = int(total_trials * congruencia_porcentaje)
    incongruentes = total_trials - congruentes

    # Crear la lista con las proporciones exactas
    congruencia_lista = [1] * congruentes + [0] * incongruentes  # 1 = congruente, 0 = incongruente

    # Barajar la lista para aleatorizar el orden
    random.shuffle(congruencia_lista)

    return congruencia_lista

# Generate the congruence list for the entire task
def generar_congruencia_para_toda_la_tarea(lista_imagenes):
    from collections import Counter

    # Count how many times each image appears
    conteo_imagenes = Counter([img.split("\\")[-1].split("/")[-1].split(".")[0] for img in lista_imagenes])

    # Generate congruence lists for each image according to its proportion
    congruencia_por_imagen = {}
    for nombre_imagen, cantidad in conteo_imagenes.items():
        porcentaje = proporciones_congruencia.get(nombre_imagen, 1.0)  # Default to 100%
        congruencia_por_imagen[nombre_imagen] = generar_congruencia(cantidad, porcentaje)
        print(f"Imagen: {nombre_imagen}, Total: {cantidad}, Porcentaje esperado: {porcentaje}, Lista de congruencia: {congruencia_por_imagen[nombre_imagen]}")

    return congruencia_por_imagen

def evaluar_respuesta(img, keys, congruencia_lista):
    """
    Evalúa la respuesta del usuario y asigna feedback (congruente o incongruente) basado en la lista de congruencia.
    """
    tecla_registrada = keys[0][0] if keys else "N/A"
    correct = -1
    go_no_go = "N/A"

    # Determinar si es un ensayo "go" o "no-go"
    if "fbE.jpg" in img or "F.jpg" in img or "A.jpg" in img:
        correct = 0 if tecla_registrada == "space" else 1
        go_no_go = "no-go"
    elif "E.jpg" in img or "B.jpg" in img or "C.jpg" in img:
        correct = 1 if tecla_registrada == "space" else 0
        go_no_go = "go"

    tipo_asociacion = "N/A"
    feedback = -1

    # Asignar tipo de asociación y calcular feedback basado en la lista determinista
    if "C.jpg" in img or "fbE.jpg" in img:
        tipo_asociacion = "100"
        feedback = correct  # Feedback siempre congruente
    elif "B.jpg" in img or "A.jpg" in img:
        tipo_asociacion = "90-10"
        feedback = correct if congruencia_lista.pop(0) == 1 else abs(correct - 1)
    elif "E.jpg" in img or "F.jpg" in img:
        tipo_asociacion = "80-20"
        feedback = correct if congruencia_lista.pop(0) == 1 else abs(correct - 1)

    congruente = 1 if correct == feedback else 0

    # Log de depuración
    print(f"Imagen: {img}, Correct: {correct}, Feedback: {feedback}, Tipo Asociación: {tipo_asociacion}, Go/No-Go: {go_no_go}, Congruente: {congruente}")

    return correct, feedback, tipo_asociacion, go_no_go, tecla_registrada, congruente
def mostrar_retroalimentacion(datos_bloque):
    idx_correct = 18
    idx_rt = 17
    datos_validos = [d for d in datos_bloque if d[idx_correct] in (0, 1)]
    if datos_validos:
        aciertos = sum(1 for d in datos_validos if d[idx_correct] == 1)
        precision = (aciertos / len(datos_validos)) * 100

        tiempos = [d[idx_rt] for d in datos_validos if isinstance(d[idx_rt], (int, float))]
        velocidad = sum(tiempos) / len(tiempos) if tiempos else 0

        feedback_texto = f"Precisión: {precision:.1f}%\nTiempo de respuesta medio: {velocidad:.0f} ms"

        if precision < 60:
            mensaje_extra = "Sigue intentándolo."
        else:
            mensaje_extra = "¡Sigue así!"
    else:
        feedback_texto = "No se han registrado respuestas para calcular el desempeño."
        mensaje_extra = ""

    feedback_general = f"Retroalimentación del bloque:\n{feedback_texto}\n\n{mensaje_extra}"
    retro_text = visual.TextStim(win, text=feedback_general, color=(-1, -1, -1), height=30)
    retro_text.draw()
    win.flip()
    event.waitKeys(keyList=["space", "escape"])
# Triggers para feedback
FEEDBACK_CORRECTO_TRIGGER = 3
FEEDBACK_INCORRECTO_TRIGGER = 4

def ejecutar_bloque(lista_imagenes, congruencia_por_imagen, bloque_num, enviar_triggers=True):
    datos = []
    tarea_start_time = core.getTime() * 1000  # Tiempo inicial de la tarea en milisegundos

    for img in lista_imagenes:
        check_exit()

        # Cruz de fijación
        fixation_time = 500 + random.randint(0, 500)  # entre 500 y 1000 ms
        fixation_start_time = core.getTime() * 1000 - tarea_start_time
        fixation.draw()
        if enviar_triggers:
            dev.activate_line(bitmask=1)  # Trigger para fijación
        win.flip()

        while True:
            fixation_elapsed_time = core.getTime() * 1000 - tarea_start_time - fixation_start_time
            if fixation_elapsed_time >= fixation_time:
                break

        fixation_end_time = core.getTime() * 1000 - tarea_start_time

        check_exit()

        # Mostrar imagen
        nombre_imagen = img.split("\\")[-1].split("/")[-1].split(".")[0]  # Nombre sin extensión
        trigger_value = trigger_map.get(nombre_imagen, 0)  # 0 por defecto si no se encuentra
        imagen_stim.image = img
        imagen_stim.draw()
        #Activar trigger específico SOLO si corresponde
        if enviar_triggers:
            dev.activate_line(bitmask=trigger_value)
        win.flip()
        imagen_start_time = core.getTime() * 1000 - tarea_start_time
        keys = event.waitKeys(maxWait=1.0, keyList=["space", "escape"], timeStamped=True)

        if keys and keys[0][0] == "escape":
            check_exit()

        reaction_time = round((keys[0][1] * 1000 - tarea_start_time) - imagen_start_time, 3) if keys else "N/A"
        reaction_time_ms = round((keys[0][1] * 1000 - tarea_start_time), 3) if keys else "N/A"

        if enviar_triggers and keys:
            dev.activate_line(bitmask=2)  # Trigger para tecla presionada

        tiempo_transcurrido = (keys[0][1] * 1000 - tarea_start_time - imagen_start_time) if keys else 1000
        tiempo_restante = max(0, 1000 - tiempo_transcurrido)
        core.wait(tiempo_restante / 1000.0)  # Espera hasta que se cumplan los 1000 ms
        # ¡AHORA! Aquí es donde realmente desaparece la imagen:
        imagen_end_time = core.getTime() * 1000 - tarea_start_time

        key_pressed = 1 if keys else 0

        # Evaluar la respuesta usando la lista correcta de congruencia
        correct, feedback, tipo_asociacion, go_no_go, tecla_registrada, congruente = evaluar_respuesta(
            img, keys, congruencia_por_imagen[nombre_imagen]
        )

        # Evaluar la respuesta usando la lista correcta de congruencia
        correct, feedback, tipo_asociacion, go_no_go, tecla_registrada, congruente = evaluar_respuesta(
            img, keys, congruencia_por_imagen[nombre_imagen]
        )

        # Mostrar feedback basado en tipo_asociacion
        feedback_start_time = core.getTime() * 1000 - tarea_start_time
        feedback_stim.text = "Correcto" if feedback == 1 else "Incorrecto"
        feedback_stim.draw()
        if enviar_triggers:
           if correct == 1:
            dev.activate_line(bitmask=FEEDBACK_CORRECTO_TRIGGER)
        elif correct == 0:
            dev.activate_line(bitmask=FEEDBACK_INCORRECTO_TRIGGER)
        win.flip()

        while True:
            feedback_elapsed_time = core.getTime() * 1000 - tarea_start_time - feedback_start_time
            if feedback_elapsed_time >= 500:
                break

        feedback_end_time = core.getTime() * 1000 - tarea_start_time

        go_tipo_asociacion = f"{go_no_go}{tipo_asociacion}"
        # Guardar datos del ensayo
        datos.append([datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"), "Tarea TFM", psychopy.__version__,
                      60, 60, datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"), nombre, edad, img.split("/")[-1],
                      round(fixation_start_time, 3), round(fixation_end_time, 3), round(imagen_start_time, 3),
                      round(imagen_end_time, 3), round(feedback_start_time, 3), round(feedback_end_time, 3),
                      key_pressed, reaction_time_ms, reaction_time, correct, feedback,
                      tipo_asociacion, go_no_go, tecla_registrada, congruente, bloque_num, go_tipo_asociacion])

    return datos

# Main task execution
try:
    # Generate congruence list for the entire task
    lista_codigos_tarea = df_principal["Imágenes"].dropna().tolist()
    lista_rutas_tarea = [mapa_imagenes[codigo] for codigo in lista_codigos_tarea]
    congruencia_por_imagen = generar_congruencia_para_toda_la_tarea(lista_rutas_tarea)

    # Run the ensayo (20 trials)
    df_ensayo = df_principal.head(20)

    # Extract image codes and map to paths for the ensayo
    lista_codigos_ensayo = df_ensayo["Imágenes"].dropna().tolist()
    lista_rutas_ensayo = [mapa_imagenes[codigo] for codigo in lista_codigos_ensayo]

    # Generate a separate congruence list for the ensayo
    congruencia_por_imagen_ensayo = generar_congruencia_para_toda_la_tarea(lista_rutas_ensayo)
    datos_ensayo = ejecutar_bloque(lista_rutas_ensayo, congruencia_por_imagen_ensayo, 0, enviar_triggers=False)  # 0 o 1, según prefieras

    # Transition screen after ensayo
    transicion_text = visual.TextStim(win, text="¡Muy bien! Ahora que has comprendido la tarea, vamos a realizar la prueba. Pulsa la barra espaciadora cuando estés preparado para comenzar.", color=(-1, -1, -1), height=30)
    transicion_text.draw()
    win.flip()
    if "escape" in event.waitKeys(keyList=["space", "escape"]):
        check_exit()

    # Divide the task into blocks of 90 trials and execute each block
    bloque_size = 90
    num_bloques = (len(lista_rutas_tarea) + bloque_size - 1) // bloque_size
    for i in range(num_bloques):
        start = i * bloque_size
        end = start + bloque_size
        bloque_actual = lista_rutas_tarea[start:end]
        datos_bloque = ejecutar_bloque(bloque_actual, congruencia_por_imagen, i+1, enviar_triggers=True)  # i+1 para que el primer bloque sea 1
        datos_principales += datos_bloque

    # Retroalimentación después del bloque, excepto el último
        if i < num_bloques - 1:
           mostrar_retroalimentacion(datos_bloque)
        # Descanso
           descanso_text = visual.TextStim(win, text="Tómate un descanso, y cuando estés preparado para seguir, pulsa la barra espaciadora", color=(-1, -1, -1), height=30)
           descanso_text.draw()
           win.flip()
           if "escape" in event.waitKeys(keyList=["space", "escape"]):
               check_exit()

    # Show completion screen
    final_text = visual.TextStim(win, text="¡Has terminado con la tarea! Muchas gracias por participar.", color=(-1, -1, -1), height=30)
    final_text.draw()
    win.flip()
    if "escape" in event.waitKeys(keyList=["space", "escape"]):
        check_exit()

except Exception as e:
    print(f"Ocurrió un error: {e}")

finally:
    guardar_datos()
    win.close()
    core.quit()
